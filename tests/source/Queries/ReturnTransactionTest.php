<?php
namespace PaynetEasy\Paynet\Queries;

use PaynetEasy\Paynet\Data\Order;
use PaynetEasy\Paynet\Data\OrderInterface;

use Exception;
/**
 * Test class for Status.
 * Generated by PHPUnit on 2012-06-14 at 20:08:20.
 */
class ReturnTransactionTest extends QueryTest
{
    /**
     * Test class
     * @var string
     */
    protected $class            = 'ReturnTransaction';

    public function testControl()
    {
        $this->transport->response  = array
        (
            'type'              => 'status-response',
            'status'            => 'approved',
            'paynet-order-id'   => 'PAYNET-112233',
            'serial-number'     => md5(time())
        );

        $this->query->setOrder(new Order
        (
            array
            (
                'client_orderid'        => 'CLIENT-112233',
                'paynet_order_id'       => 'PAYNET-112233',
                'amount'                => 99.1,
                'currency'              => 'EUR'
            )
        ));

        $e                          = null;
        try
        {
            $request = $this->query->createRequest();
            $response = $this->transport->makeRequest($request);
            $this->query->processResponse($response);
        }
        catch(Exception $e)
        {
        }

        // login + client-order-id + paynet-order-id + merchant-control
        $control                    = sha1
        (
                $this->config['login'].
                'CLIENT-112233'.
                'PAYNET-112233'.
                '9910'.
                'EUR'.
                $this->config['control']
        );

        $this->assertTrue(!empty($this->transport->request['control']), 'control undefined');
        $this->assertEquals($control, $this->transport->request['control']);
    }

    public function providerProcess()
    {
        $order                  = new Order
        (
            array
            (
                'client_orderid'        => 'CLIENT-112233',
                'paynet_order_id'       => 'PAYNET-112233'
            )
        );

        $dataset                = array();

        // APPROVE
        $response               = array
        (
            'type'              => 'async-response',
            'status'            => 'approved',
            'paynet-order-id'   => $order->getPaynetOrderId(),
            'merchant-order-id' => $order->getOrderId(),
            'serial-number'     => md5(time())
        );

        $assert                 = array
        (
            'state'             => OrderInterface::STATE_END,
            'status'            => OrderInterface::STATUS_APPROVED
        );

        $dataset[]              = array($order, $response, $assert);

        // DECLINE
        $response               = array
        (
            'type'              => 'async-response',
            'status'            => 'declined',
            'paynet-order-id'   => $order->getPaynetOrderId(),
            'merchant-order-id' => $order->getOrderId(),
            'serial-number'     => md5(time()),
            'error-message'     => 'test error message',
            'error-code'        => '578'
        );

        $assert                 = array
        (
            'state'             => OrderInterface::STATE_END,
            'status'            => OrderInterface::STATUS_DECLINED,
            'error_message'     => 'test error message',
            'error_code'        => '578'
        );

        $dataset[]              = array($order, $response, $assert);

        // FILTERED
        $response               = array
        (
            'type'              => 'async-response',
            'status'            => 'filtered',
            'paynet-order-id'   => $order->getPaynetOrderId(),
            'merchant-order-id' => $order->getOrderId(),
            'serial-number'     => md5(time()),
            'error-message'     => 'test filtered message',
            'error-code'        => '8876'
        );

        $assert                 = array
        (
            'state'             => OrderInterface::STATE_END,
            'status'            => OrderInterface::STATUS_DECLINED,
            'error_message'     => 'test filtered message',
            'error_code'        => '8876'
        );

        $dataset[]              = array($order, $response, $assert);

        // PROCESSING
        $response               = array
        (
            'type'              => 'async-response',
            'status'            => 'processing',
            'paynet-order-id'   => $order->getPaynetOrderId(),
            'merchant-order-id' => $order->getOrderId(),
            'serial-number'     => md5(time())
        );

        $assert                 = array
        (
            'state'             => OrderInterface::STATE_PROCESSING,
            'status'            => null
        );

        $dataset[]              = array($order, $response, $assert);

        // ERROR
        $response               = array
        (
            'type'              => 'async-response',
            'status'            => 'error',
            'paynet-order-id'   => $order->getPaynetOrderId(),
            'merchant-order-id' => $order->getOrderId(),
            'serial-number'     => md5(time()),
            'error-message'     => 'test error message',
            'error-code'        => '2'
        );

        $assert                 = array
        (
            'state'             => OrderInterface::STATE_END,
            'status'            => OrderInterface::STATUS_ERROR,
            'error_message'     => 'test error message',
            'error_code'        => '2',
            'exception'         => true
        );

        $dataset[]              = array($order, $response, $assert);

        // Errors validation-error
        $response               = array
        (
            'type'              => 'validation-error',
            'error-message'     => 'test validation message',
            'error-code'        => '1'
        );

        $assert                 = array
        (
            'state'             => OrderInterface::STATE_END,
            'status'            => OrderInterface::STATUS_ERROR,
            'error_message'     => 'test validation message',
            'error_code'        => '1',
            'exception'         => true
        );

        $dataset[]              = array($order, $response, $assert);

        // Errors validation-error
        $response               = array
        (
            'type'              => 'error',
            'error-message'     => 'test error message',
            'error-code'        => '1'
        );

        $assert                 = array
        (
            'state'             => OrderInterface::STATE_END,
            'status'            => OrderInterface::STATUS_ERROR,
            'error_message'     => 'test error message',
            'error_code'        => '1',
            'exception'         => true
        );

        $dataset[]              = array($order, $response, $assert);

        return $dataset;
    }

    /**
     * @dataProvider providerProcess
     */
    public function testProcess($order, $server_response = null, $assert = null)
    {
        $this->transport->response  = $server_response;

        $this->query->setOrder($order);

        parent::testProcess($assert);
    }
}

?>
