<?php

namespace PaynetEasy\Paynet\Queries;

use PaynetEasy\Paynet\Data\Order;
use PaynetEasy\Paynet\Transport\Response;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-06-11 at 18:12:43.
 */
class StatusQueryTest extends QueryTestPrototype
{
    /**
     * @var StatusQuery
     */
    protected $object;

    /**
     * @var \PaynetEasy\Paynet\Data\Order
     */
    protected $order;

    /**
     * @var array
     */
    protected $config;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->config           = array
        (
            'login'                 => 'test-login',
            'end_point'             =>  789,
            'control'               => 'D5F82EC1-8575-4482-AD89-97X6X0X20X22',
            'redirect_url'          => 'https://example.com/redirect_url',
            'server_callback_url'   => 'https://example.com/callback_url'
        );

        $this->object = new StatusQuery($this->config);
        $this->order  = new Order(array
        (
            'client_orderid'        => 'CLIENT-112233',
            'paynet_order_id'       => 'PAYNET-112233'
        ));
    }

    /**
     * @covers PaynetEasy\Paynet\Queries\StatusQuery::createRequest
     */
    public function testCreateRequest()
    {
        $request = $this->object->createRequest($this->order);

        // login + client-order-id + paynet-order-id + merchant-control
        $control = sha1
        (
            $this->config['login'] .
            'CLIENT-112233' .
            'PAYNET-112233' .
            $this->config['control']
        );

        $this->assertInstanceOf('PaynetEasy\Paynet\Transport\Request', $request);
        $this->assertNotNull($request['control']);
        $this->assertEquals($control, $request['control']);
        $this->assertFalse($this->order->hasErrors());
    }

    /**
     * @covers PaynetEasy\Paynet\Queries\StatusQuery::processResponse
     * @dataProvider testProcessRedirectProvider
     */
    public function testProcessRedirect(array $response)
    {
        $this->object->processResponse($this->order, new Response($response));

        $this->assertOrderStates(Order::STATE_REDIRECT, null);
        $this->assertFalse($this->order->hasErrors());
    }

    public function testProcessRedirectProvider()
    {
        return array(array(
        // 3D redirect
        array
        (
            'type'              => 'status-response',
            'status'            => 'processing',
            'html'              => '<HTML>',
            'paynet-order-id'   => 'PAYNET-112233',
            'serial-number'     =>  md5(time())
        ),
        // URL redirect
        array
        (
            'type'              => 'status-response',
            'status'            => 'processing',
            'redirect-url'      => 'http://testdomain.com/',
            'paynet-order-id'   => 'PAYNET-112233',
            'serial-number'     =>  md5(time())
        )));
    }


    public function testProcessResponseApprovedProvider()
    {
        return array(array(array
        (
            'type'              => 'status-response',
            'status'            => 'approved',
            'paynet-order-id'   => 'PAYNET-112233',
            'serial-number'     =>  md5(time())
        )));
    }

    public function testProcessResponseDeclinedProvider()
    {
        return array(array(array
        (
            'type'              => 'status-response',
            'status'            => 'declined',
            'paynet-order-id'   => 'PAYNET-112233',
            'serial-number'     =>  md5(time()),
            'error-message'     => 'test error message',
            'error-code'        =>  578
        )));
    }

    public function testProcessResponseFilteredProvider()
    {
        return array(array(array
        (
            'type'              => 'status-response',
            'status'            => 'filtered',
            'paynet-order-id'   => 'PAYNET-112233',
            'serial-number'     =>  md5(time()),
            'error-message'     => 'test filtered message',
            'error-code'        =>  8876
        )));
    }

    public function testProcessResponseProcessingProvider()
    {
        return array(array(array
        (
            'type'              => 'status-response',
            'status'            => 'processing',
            'paynet-order-id'   => 'PAYNET-112233',
            'serial-number'     =>  md5(time())
        )));
    }

    public function testProcessResponseErrorProvider()
    {
        return array(array(
        // Payment error after check
        array
        (
            'type'              => 'status-response',
            'status'            => 'error',
            'paynet-order-id'   => 'PAYNET-112233',
            'serial-number'     =>  md5(time()),
            'error-message'     => 'status error message',
            'error-code'        =>  2
        ),
        // Validation error
        array
        (
            'type'              => 'validation-error',
            'error-message'     => 'validation error message',
            'error-code'        =>  1
        ),
        // Immediate payment error
        array
        (
            'type'              => 'error',
            'error-message'     => 'immediate error message',
            'error-code'        =>  1
        )));
    }
}
