<?php
namespace PaynetEasy\Paynet\Workflow;

use PHPUnit_Framework_TestCase;
use PaynetEasy\Paynet\Transport\Transport;
use PaynetEasy\Paynet\Data\Order;
use PaynetEasy\Paynet\Exceptions\PaynetException;
use Exception;

/**
 * Test class for Query.
 * Generated by PHPUnit on 2012-06-14 at 20:08:20.
 */
abstract class AbstractWorkflowTest extends PHPUnit_Framework_TestCase
{
    /**
     * Control code for SIGN
     */
    const CONTROL_CODE  = 'D5F82EC1-8575-4482-AD89-97X6X0X20X22';

    /**
     * Test class
     * @var string
     */
    protected $class;

    /**
     * @var Status
     */
    protected $query;

    /**
     * @var \PaynetEasy\Paynet\Transport\Transport
     */
    protected $transport;

    /**
     * @var array
     */
    protected $config;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->transport        = new Transport();

        $this->class            = __NAMESPACE__.'\\'.$this->class;

        $this->query            = new $this->class($this->transport);

        $this->config           = array
        (
            'login'             => 'test-login',
            'end_point'         => '789',
            'control'           => self::CONTROL_CODE,
            'redirect_url'      => 'https://example.com/redirect_url',
            'server_callback_url' => 'https://example.com/callback_url'
        );

        $this->query->setConfig($this->config);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function testStatusProvider()
    {
        $order                  = new Order
        (
            array
            (
                'client_orderid'        => 'CLIENT-112233',
                'paynet_order_id'       => 'PAYNET-112233'
            )
        );

        $dataset                = array();

        // APPROVE
        $response               = array
        (
            'type'              => 'status-response',
            'status'            => 'approved',
            'paynet-order-id'   => $order->getPaynetOrderId(),
            'serial-number'     => md5(time())
        );

        $assert                 = array
        (
            'state'             => Order::STATE_END,
            'status'            => Order::STATUS_APPROVED
        );

        $dataset[]              = array($order, $response, $assert);

        // DECLINE
        $response               = array
        (
            'type'              => 'status-response',
            'status'            => 'declined',
            'paynet-order-id'   => $order->getPaynetOrderId(),
            'serial-number'     => md5(time()),
            'error-message'     => 'test error message',
            'error-code'        => '578'
        );

        $assert                 = array
        (
            'state'             => Order::STATE_END,
            'status'            => Order::STATUS_DECLINED,
            'error_message'     => 'test error message',
            'error_code'        => '578'
        );

        $dataset[]              = array($order, $response, $assert);

        // FILTERED
        $response               = array
        (
            'type'              => 'status-response',
            'status'            => 'filtered',
            'paynet-order-id'   => $order->getPaynetOrderId(),
            'serial-number'     => md5(time()),
            'error-message'     => 'test filtered message',
            'error-code'        => '8876'
        );

        $assert                 = array
        (
            'state'             => Order::STATE_END,
            'status'            => Order::STATUS_DECLINED,
            'error_message'     => 'test filtered message',
            'error_code'        => '8876'
        );

        $dataset[]              = array($order, $response, $assert);

        // PROCESSING
        $response               = array
        (
            'type'              => 'status-response',
            'status'            => 'processing',
            'paynet-order-id'   => $order->getPaynetOrderId(),
            'serial-number'     => md5(time())
        );

        $assert                 = array
        (
            'state'             => Order::STATE_PROCESSING,
            'status'            => null
        );

        $dataset[]              = array($order, $response, $assert);

        // 3D redirect
        $response               = array
        (
            'type'              => 'status-response',
            'status'            => 'processing',
            'html'              => '<HTML>',
            'paynet-order-id'   => $order->getPaynetOrderId(),
            'serial-number'     => md5(time())
        );

        $assert                 = array
        (
            'state'             => Order::STATE_REDIRECT,
            'status'            => null
        );

        $dataset[]              = array($order, $response, $assert);

        // URL redirect
        $response               = array
        (
            'type'              => 'status-response',
            'status'            => 'processing',
            'redirect-url'      => 'http://testdomain.com/',
            'paynet-order-id'   => $order->getPaynetOrderId(),
            'serial-number'     => md5(time())
        );

        $assert                 = array
        (
            'state'             => Order::STATE_REDIRECT,
            'status'            => null
        );

        $dataset[]              = array($order, $response, $assert);

        // ERROR
        $response               = array
        (
            'type'              => 'status-response',
            'status'            => 'error',
            'paynet-order-id'   => $order->getPaynetOrderId(),
            'serial-number'     => md5(time()),
            'error-message'     => 'test error message',
            'error-code'        => '2'
        );

        $assert                 = array
        (
            'state'             => Order::STATE_END,
            'status'            => Order::STATUS_ERROR,
            'error_message'     => 'test error message',
            'error_code'        => '2',
            'exception'         => true
        );

        $dataset[]              = array($order, $response, $assert);

        // Errors validation-error
        $response               = array
        (
            'type'              => 'validation-error',
            'error-message'     => 'test validation message',
            'error-code'        => '1'
        );

        $assert                 = array
        (
            'state'             => Order::STATE_END,
            'status'            => Order::STATUS_ERROR,
            'error_message'     => 'test validation message',
            'error_code'        => '1',
            'exception'         => true
        );

        $dataset[]              = array($order, $response, $assert);

        // Errors validation-error
        $response               = array
        (
            'type'              => 'error',
            'error-message'     => 'test error message',
            'error-code'        => '1'
        );

        $assert                 = array
        (
            'state'             => Order::STATE_END,
            'status'            => Order::STATUS_ERROR,
            'error_message'     => 'test error message',
            'error_code'        => '1',
            'exception'         => true
        );

        $dataset[]              = array($order, $response, $assert);

        return $dataset;
    }

    public function testProcess($assert, $callback = null)
    {
        $e                          = null;
        try
        {
            $response = $this->query->createRequest($callback);
        }
        catch(Exception $e)
        {
        }

        if(!empty($assert['exception']))
        {
            $e = $this->query->getLastError();

            $this->assertTrue($e instanceof PaynetException, 'expected exception PaynetException');
            $this->assertEquals($e->getMessage(), $assert['error_message'], 'exception message mismatch');
            $this->assertEquals($e->getCode(), $assert['error_code'], 'exception code mismatch');

            return;
        }
        elseif(!empty($assert['error_message']) && $assert['status'] !== 'declined')
        {
            $e = $this->query->getLastError();

            $this->assertTrue($e instanceof PaynetException, 'expected getLastError');
            $this->assertEquals($e->getMessage(), $assert['error_message'], 'Error Message wrong');
            $this->assertEquals($e->getCode(), $assert['error_code'], 'Error Code wrong');
        }
        else
        {
            $this->assertFalse($e instanceof PaynetException, 'not expected exception PaynetException');
            $this->assertFalse($this->query->getLastError() instanceof PaynetException, 'getLastError must be null');
            $this->assertInstanceOf('PaynetEasy\Paynet\Transport\Response', $response);
        }

        if (isset($assert['state']))
        {
            $this->assertEquals($this->query->state(), $assert['state'], 'query.state not equal '.$assert['state']);
        }

        if (isset($assert['status']))
        {
            $this->assertEquals($this->query->status(), $assert['status'], 'query.status not equal'. $assert['status']);
        }
    }
}

?>
