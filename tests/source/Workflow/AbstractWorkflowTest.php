<?php
namespace PaynetEasy\Paynet\Workflow;

use PHPUnit_Framework_TestCase;
use PaynetEasy\Paynet\Transport\Transport;

use PaynetEasy\Paynet\Exceptions\PaynetException;
use Exception;

/**
 * Test class for Query.
 * Generated by PHPUnit on 2012-06-14 at 20:08:20.
 */
abstract class AbstractWorkflowTest extends PHPUnit_Framework_TestCase
{
    /**
     * Control code for SIGN
     */
    const CONTROL_CODE  = 'D5F82EC1-8575-4482-AD89-97X6X0X20X22';

    /**
     * Test class
     * @var string
     */
    protected $class;

    /**
     * @var Status
     */
    protected $query;

    /**
     * @var \PaynetEasy\Paynet\Transport\Transport
     */
    protected $transport;

    /**
     * @var array
     */
    protected $config;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->transport        = new Transport();

        $this->class            = __NAMESPACE__.'\\'.$this->class;

        $this->query            = new $this->class($this->transport);

        $this->config           = array
        (
            'login'             => 'test-login',
            'end_point'         => '789',
            'control'           => self::CONTROL_CODE,
            'redirect_url'      => 'https://example.com/redirect_url',
            'server_callback_url' => 'https://example.com/callback_url'
        );

        $this->query->setConfig($this->config);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function testProcess($assert, $callback = null)
    {
        $e                          = null;
        try
        {
            $response = $this->query->createRequest($callback);
        }
        catch(Exception $e)
        {
        }

        if(!empty($assert['exception']))
        {
            $this->assertTrue($e instanceof PaynetException, 'expected exception PaynetException');
            $this->assertEquals($e->getMessage(), $assert['error_message'], 'exception message mismatch');
            $this->assertEquals($e->getCode(), $assert['error_code'], 'exception code mismatch');

            return;
        }
        elseif(!empty($assert['error_message']) && $assert['status'] !== 'declined')
        {
            $e                      = $this->query->getLastError();
            $this->assertTrue($e instanceof PaynetException, 'expected getLastError');
            $this->assertEquals($e->getMessage(), $assert['error_message'], 'Error Message wrong');
            $this->assertEquals($e->getCode(), $assert['error_code'], 'Error Code wrong');
        }
        else
        {
            $this->assertFalse($e instanceof PaynetException, 'not expected exception PaynetException');
            $this->assertFalse($this->query->getLastError() instanceof PaynetException, 'getLastError must be null');
            $this->assertInstanceOf('PaynetEasy\Paynet\Transport\Response', $response);
        }

        $this->assertEquals($this->query->state(), $assert['state'], 'query.state not equal '.$assert['state']);
        $this->assertEquals($this->query->status(), $assert['status'], 'query.status not equal'. $assert['status']);
    }
}

?>
