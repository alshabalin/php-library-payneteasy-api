<?php

namespace PaynetEasy\Paynet\Workflow;

use PaynetEasy\Paynet\Transport\Response;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-06-15 at 21:53:18.
 */
class AbstractWorkflowTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ConcreteWorkflow
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ConcreteWorkflow();
    }

    /**
     * @covers PaynetEasy\Paynet\Workflow\AbstractWorkflow::setNeededAction
     * @dataProvider testSetNeededActionProvider
     */
    public function testSetNeededAction($responseData, $neededAction)
    {
        $response = new Response($responseData);

        $this->object->setNeededAction($response);

        $this->assertEquals($neededAction, $response->getNeededAction());
    }

    public function testSetNeededActionProvider()
    {
        return array(
        array
        (
            array('status' => 'processing'),
            Response::NEEDED_STATUS_UPDATE
        ),
        array
        (
            array('redirect-url' => 'http://redirect-url.com'),
            Response::NEEDED_REDIRECT
        ),
        array
        (
            array('html' => '<html>code</html>'),
            Response::NEEDED_SHOW_HTML
        ));
    }

    /**
     * @covers PaynetEasy\Paynet\Workflow\AbstractWorkflow::setInitialApiMethod
     */
    public function testSetApiMethod()
    {
        $this->object->setInitialApiMethod('\PaynetEasy\Paynet\Workflow\SaleWorkflow');
        $this->assertEquals('sale', $this->object->initialApiMethod);

        $this->object->setInitialApiMethod('\PaynetEasy\Paynet\Workflow\MakeRebillWorkflow');
        $this->assertEquals('sale', $this->object->initialApiMethod);

        $this->object->initialApiMethod = null;

        $this->object->setInitialApiMethod('\PaynetEasy\Paynet\Workflow\MakeRebillWorkflow');
        $this->assertEquals('make-rebill', $this->object->initialApiMethod);
    }
}

class ConcreteWorkflow extends AbstractWorkflow
{
    public $initialApiMethod;

    public function __construct()
    {
    }

    public function setNeededAction(Response $response)
    {
        return parent::setNeededAction($response);
    }

    public function setInitialApiMethod($class)
    {
        parent::setInitialApiMethod($class);
    }
}