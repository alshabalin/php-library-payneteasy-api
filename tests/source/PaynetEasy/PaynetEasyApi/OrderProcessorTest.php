<?php

namespace PaynetEasy\PaynetEasyApi;

use PaynetEasy\PaynetEasyApi\OrderData\OrderInterface;

use PaynetEasy\PaynetEasyApi\OrderData\Order;
use PaynetEasy\PaynetEasyApi\Transport\Request;
use PaynetEasy\PaynetEasyApi\Transport\Response;

use PaynetEasy\PaynetEasyApi\Workflow\FakeWorkflow;
use PaynetEasy\PaynetEasyApi\Query\FakeQuery;
use PaynetEasy\PaynetEasyApi\Transport\FakeGatewayClient;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-06-16 at 14:01:06.
 */
class OrderProcessorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var PublicOrderProcessor
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new PublicOrderProcessor('_');
    }

    public function testExecuteWorkflowWithEndedOrder()
    {
        $order = new Order;
        $order->setTransportStage(OrderInterface::STAGE_ENDED);

        $handlerCalled = false;
        $handler  = function() use (&$handlerCalled)
        {
            $handlerCalled = true;
        };

        $this->object->setHandler(OrderProcessor::HANDLER_FINISH_PROCESSING, $handler);
        $this->object->executeWorkflow('fake', array(), $order);

        $this->assertTrue($handlerCalled);
    }

    /**
     * @dataProvider testExecuteWorkflowProvider
     */
    public function testExecuteWorkflow($neededAction, $handlerName)
    {
        $response = new Response;
        $response->setNeededAction($neededAction);

        FakeWorkflow::$response = $response;

        $handlerCalled = false;
        $handler  = function() use (&$handlerCalled)
        {
            $handlerCalled = true;
        };

        $this->object->setHandler($handlerName, $handler);
        $this->object->executeWorkflow('fake', array(), new Order(array()));

        $this->assertTrue($handlerCalled);
    }

    public function testExecuteWorkflowProvider()
    {
        return(array(
        array
        (
            Response::NEEDED_REDIRECT,
            OrderProcessor::HANDLER_REDIRECT
        ),
        array
        (
            Response::NEEDED_SHOW_HTML,
            OrderProcessor::HANDLER_SHOW_HTML
        ),
        array
        (
            Response::NEEDED_STATUS_UPDATE,
            OrderProcessor::HANDLER_STATUS_UPDATE
        )));
    }

    public function testExecuteQuery()
    {
        FakeQuery::$request             = new Request(array('_'));
        FakeGatewayClient::$response    = new Response;

        $this->object->setGatewayClient(new FakeGatewayClient);

        $response = $this->object->executeQuery('fake', array(), new Order(array()));

        $this->assertNotNull($response);
        $this->assertInstanceOf('\PaynetEasy\PaynetEasyApi\Transport\Response', $response);
    }

    public function testExecuteCallback()
    {
        $response = $this->object->executeCallback(array('type' => 'fake'), array(), new Order(array()));

        $this->assertNotNull($response);
        $this->assertInstanceOf('PaynetEasy\PaynetEasyApi\Transport\CallbackResponse', $response);
    }

    public function testhandlers()
    {
        $this->object->setHandlers(array
        (
            OrderProcessor::HANDLER_SAVE_ORDER => function (){},
            OrderProcessor::HANDLER_SHOW_HTML => function (){}
        ));

        $this->assertCount(2, $this->object->handlers);
        $this->assertArrayHasKey(OrderProcessor::HANDLER_SAVE_ORDER, $this->object->handlers);
        $this->assertArrayHasKey(OrderProcessor::HANDLER_SHOW_HTML, $this->object->handlers);

        $this->object->removeHandler(OrderProcessor::HANDLER_SAVE_ORDER);

        $this->assertCount(1, $this->object->handlers);
        $this->assertArrayNotHasKey(OrderProcessor::HANDLER_SAVE_ORDER, $this->object->handlers);
        $this->assertArrayHasKey(OrderProcessor::HANDLER_SHOW_HTML, $this->object->handlers);

        $this->object->removeHandlers();

        $this->assertEmpty($this->object->handlers);
    }

    public function testCallHandler()
    {
        $handlerCalled = false;
        $handler  = function() use (&$handlerCalled)
        {
            $handlerCalled = true;
        };

        $this->object->setHandler(OrderProcessor::HANDLER_SAVE_ORDER, $handler);
        $this->object->callHandler(OrderProcessor::HANDLER_SAVE_ORDER, new Order(array()), new Response);

        $this->assertTrue($handlerCalled);
    }

    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage Unknown handler name: '_'
     */
    public function testSetHandlerWrongName()
    {
        $this->object->setHandler('_', 'not_callable');
    }

    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage Handler callback must be callable
     */
    public function testSetHandlerNotCallable()
    {
        $this->object->setHandler(OrderProcessor::HANDLER_SAVE_ORDER, 'not_callable');
    }
}

class PublicOrderProcessor extends OrderProcessor
{
    public $handlers = array();

    public function callHandler($handlerName, OrderInterface $order, Response $response = null)
    {
        parent::callHandler($handlerName, $order, $response);
    }
}