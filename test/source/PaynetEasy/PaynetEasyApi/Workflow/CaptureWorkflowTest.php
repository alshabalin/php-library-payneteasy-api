<?php

namespace PaynetEasy\PaynetEasyApi\Workflow;

use PaynetEasy\PaynetEasyApi\PaymentData\Payment;
use PaynetEasy\PaynetEasyApi\Transport\Response;
use PaynetEasy\PaynetEasyApi\Transport\FakeGatewayClient;
use PaynetEasy\PaynetEasyApi\Query\QueryFactory;
use PaynetEasy\PaynetEasyApi\Callback\CallbackFactory;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-06-26 at 12:30:43.
 */
class CaptureWorkflowTest extends \PHPUnit_Framework_TestCase
{
    const LOGIN                 = 'test-login';
    const END_POINT             =  789;
    const SIGN_KEY              = 'D5F82EC1-8575-4482-AD89-97X6X0X20X22';
    const CLIENT_PAYMENT_ID     = 'CLIENT-112233';
    const PAYNET_PAYMENT_ID     = 'PAYNET-112233';

    /**
     * @var CaptureWorkflow
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new CaptureWorkflow(new FakeGatewayClient('_'),
                                            new QueryFactory,
                                            new CallbackFactory,
                                            $this->getConfig());
    }

    /**
     * @dataProvider testProcessPaymentProvider
     */
    public function testProcessPayment($responseData, $stageBefore, $stageAfter, $expectedMethod = null)
    {
        FakeGatewayClient::$response = new Response($responseData);

        $payment = $this->getPayment();

        if ($stageBefore)
        {
            $payment->setProcessingStage($stageBefore);
        }

        $this->object->processPayment($payment, $responseData);

        $this->assertEquals($stageAfter, $payment->getProcessingStage());

        if ($expectedMethod)
        {
            $this->assertEquals($expectedMethod, FakeGatewayClient::$request->getApiMethod());
        }
    }

    public function testProcessPaymentProvider()
    {
        return array(
        array
        (
            array
            (
                'type'              => 'async-response',
                'status'            => 'processing',
                'paynet-order-id'   =>  self::PAYNET_PAYMENT_ID,
                'merchant-order-id' =>  self::CLIENT_PAYMENT_ID,
                'serial-number'     =>  md5(time())
            ),
            null,
            Payment::STAGE_CREATED,
            'capture'
        ),
        array
        (
            array
            (
                'type'              => 'status-response',
                'status'            => 'processing',
                'paynet-order-id'   =>  self::PAYNET_PAYMENT_ID,
                'merchant-order-id' =>  self::CLIENT_PAYMENT_ID,
                'serial-number'     =>  md5(time())
            ),
            Payment::STAGE_CREATED,
            Payment::STAGE_CREATED,
            'status'
        ),
        array
        (
            array
            (
                'status'            => 'approved',
                'amount'            =>  99.1,
                'orderid'           =>  self::PAYNET_PAYMENT_ID,
                'merchant_order'    =>  self::CLIENT_PAYMENT_ID,
                'client_orderid'    =>  self::CLIENT_PAYMENT_ID,
                'control'           => sha1
                (
                    'approved' .
                    self::PAYNET_PAYMENT_ID .
                    self::CLIENT_PAYMENT_ID .
                    self::SIGN_KEY
                )
            ),
            Payment::STAGE_REDIRECTED,
            Payment::STAGE_FINISHED,
            null
        ));
    }

    protected function getPayment()
    {
        return new Payment(array
        (
            'client_payment_id'     => self::CLIENT_PAYMENT_ID,
            'paynet_payment_id'     => self::PAYNET_PAYMENT_ID,
            'amount'                => 99.1,
            'currency'              => 'EUR'
        ));
    }

    /**
     * @return      array
     */
    protected function getConfig()
    {
        return array
        (
            'login'                 =>  self::LOGIN,
            'end_point'             =>  self::END_POINT,
            'control'               =>  self::SIGN_KEY,
            'redirect_url'          => 'https://example.com/redirect_url',
            'server_callback_url'   => 'https://example.com/callback_url'
        );
    }
}
