<?php

namespace PaynetEasy\PaynetEasyApi;

use PaynetEasy\PaynetEasyApi\PaymentData\Payment;
use PaynetEasy\PaynetEasyApi\Transport\Request;
use PaynetEasy\PaynetEasyApi\Transport\Response;
use PaynetEasy\PaynetEasyApi\Transport\CallbackResponse;

use PaynetEasy\PaynetEasyApi\Workflow\FakeWorkflow;
use PaynetEasy\PaynetEasyApi\Query\FakeQuery;
use PaynetEasy\PaynetEasyApi\Transport\FakeGatewayClient;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-06-16 at 14:01:06.
 */
class PaymentProcessorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var PublicPaymentProcessor
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new PublicPaymentProcessor('_');
    }

    public function testExecuteWorkflowWithEndedPayment()
    {
        $payment = new Payment;
        $payment->setProcessingStage(Payment::STAGE_FINISHED);

        $handlerCalled = false;
        $handler  = function() use (&$handlerCalled)
        {
            $handlerCalled = true;
        };

        $this->object->setHandler(PaymentProcessor::HANDLER_FINISH_PROCESSING, $handler);
        $this->object->executeWorkflow('fake', $payment);

        $this->assertTrue($handlerCalled);
    }

    /**
     * @dataProvider testExecuteWorkflowProvider
     */
    public function testExecuteWorkflow($neededAction, $handlerName)
    {
        $response = new Response;
        $response->setNeededAction($neededAction);

        FakeWorkflow::$response = $response;

        $handlerCalled = false;
        $handler  = function() use (&$handlerCalled)
        {
            $handlerCalled = true;
        };

        $this->object->setHandler($handlerName, $handler);
        $this->object->executeWorkflow('fake', new Payment(array()));

        $this->assertTrue($handlerCalled);
    }

    public function testExecuteWorkflowProvider()
    {
        return(array(
        array
        (
            Response::NEEDED_REDIRECT,
            PaymentProcessor::HANDLER_REDIRECT
        ),
        array
        (
            Response::NEEDED_SHOW_HTML,
            PaymentProcessor::HANDLER_SHOW_HTML
        ),
        array
        (
            Response::NEEDED_STATUS_UPDATE,
            PaymentProcessor::HANDLER_STATUS_UPDATE
        )));
    }

    public function testExecuteQuery()
    {
        FakeQuery::$request             = new Request(array('_'));
        FakeGatewayClient::$response    = new Response;

        $this->object->setGatewayClient(new FakeGatewayClient);

        $response = $this->object->executeQuery('fake', new Payment);

        $this->assertNotNull($response);
        $this->assertInstanceOf('\PaynetEasy\PaynetEasyApi\Transport\Response', $response);
    }

    public function testExecuteCallback()
    {
        $response = $this->object->executeCallback(new CallbackResponse(array('type' => 'fake')), new Payment);

        $this->assertNotNull($response);
        $this->assertInstanceOf('PaynetEasy\PaynetEasyApi\Transport\CallbackResponse', $response);
    }

    public function testhandlers()
    {
        $this->object->setHandlers(array
        (
            PaymentProcessor::HANDLER_SAVE_PAYMENT => function (){},
            PaymentProcessor::HANDLER_SHOW_HTML => function (){}
        ));

        $this->assertCount(2, $this->object->handlers);
        $this->assertArrayHasKey(PaymentProcessor::HANDLER_SAVE_PAYMENT, $this->object->handlers);
        $this->assertArrayHasKey(PaymentProcessor::HANDLER_SHOW_HTML, $this->object->handlers);

        $this->object->removeHandler(PaymentProcessor::HANDLER_SAVE_PAYMENT);

        $this->assertCount(1, $this->object->handlers);
        $this->assertArrayNotHasKey(PaymentProcessor::HANDLER_SAVE_PAYMENT, $this->object->handlers);
        $this->assertArrayHasKey(PaymentProcessor::HANDLER_SHOW_HTML, $this->object->handlers);

        $this->object->removeHandlers();

        $this->assertEmpty($this->object->handlers);
    }

    public function testCallHandler()
    {
        $handlerCalled = false;
        $handler  = function() use (&$handlerCalled)
        {
            $handlerCalled = true;
        };

        $this->object->setHandler(PaymentProcessor::HANDLER_SAVE_PAYMENT, $handler);
        $this->object->callHandler(PaymentProcessor::HANDLER_SAVE_PAYMENT, new Payment, new Response);

        $this->assertTrue($handlerCalled);
    }

    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage Unknown handler name: '_'
     */
    public function testSetHandlerWrongName()
    {
        $this->object->setHandler('_', 'not_callable');
    }

    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage Handler callback must be callable
     */
    public function testSetHandlerNotCallable()
    {
        $this->object->setHandler(PaymentProcessor::HANDLER_SAVE_PAYMENT, 'not_callable');
    }
}

class PublicPaymentProcessor extends PaymentProcessor
{
    public $handlers = array();

    public function callHandler($handlerName, Payment $payment, Response $response = null)
    {
        parent::callHandler($handlerName, $payment, $response);
    }
}