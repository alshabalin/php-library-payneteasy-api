<?php

namespace PaynetEasy\PaynetEasyApi;

use PaynetEasy\PaynetEasyApi\PaymentData\PaymentTransaction;
use PaynetEasy\PaynetEasyApi\Transport\Request;
use PaynetEasy\PaynetEasyApi\Transport\Response;
use PaynetEasy\PaynetEasyApi\Transport\CallbackResponse;

use PaynetEasy\PaynetEasyApi\Query\FakeQuery;
use PaynetEasy\PaynetEasyApi\Query\ExceptionQuery;
use PaynetEasy\PaynetEasyApi\Transport\FakeGatewayClient;

use Exception;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-06-16 at 14:01:06.
 */
class PaymentProcessorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var PublicPaymentProcessor
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new PublicPaymentProcessor;
    }

    protected function tearDown()
    {
        FakeQuery::$request             = null;
        FakeGatewayClient::$response    = null;
        ExceptionQuery::$request        = null;
    }

    /**
     * @dataProvider testExecuteQueryProvider
     */
    public function testExecuteQuery(array $responseData, $handlerName)
    {
        FakeQuery::$request             = new Request;
        FakeGatewayClient::$response    = new Response($responseData);

        $handlerCalled = false;
        $handler  = function() use (&$handlerCalled)
        {
            $handlerCalled = true;
        };

        $this->object->setHandler($handlerName, $handler);
        $this->object->setGatewayClient(new FakeGatewayClient);

        $this->assertNotNull($this->object->executeQuery('fake', new PaymentTransaction));
        $this->assertTrue($handlerCalled);
    }

    public function testExecuteQueryProvider()
    {
        return(array(
        array
        (
            array('status'          => 'approved'),
            PaymentProcessor::HANDLER_FINISH_PROCESSING
        ),
        array
        (
            array('redirect-url'    => 'http://example.com'),
            PaymentProcessor::HANDLER_REDIRECT
        ),
        array
        (
            array('html'            => urlencode('<html></html>')),
            PaymentProcessor::HANDLER_SHOW_HTML
        ),
        array
        (
            array('status'          => 'processing'),
            PaymentProcessor::HANDLER_STATUS_UPDATE
        )));
    }

    /**
     * @expectedException \Exception
     */
    public function testExecuteQueryWithoutExceptionHandler()
    {
        $this->object->executeQuery('sale', new PaymentTransaction);
    }

    public function testExecuteQueryWithExceptionOnCreateRequest()
    {
        $handlerCalled = false;
        $handler  = function() use (&$handlerCalled)
        {
            $handlerCalled = true;
        };

        $this->object->setHandler(PaymentProcessor::HANDLER_CATCH_EXCEPTION, $handler);
        $this->object->executeQuery('sale', new PaymentTransaction);

        $this->assertTrue($handlerCalled);
    }

    public function testExecuteQueryWithExceptionOnMakeRequest()
    {
        $handlerCalled = false;
        $handler  = function() use (&$handlerCalled)
        {
            $handlerCalled = true;
        };

        $this->object->setHandler(PaymentProcessor::HANDLER_CATCH_EXCEPTION, $handler);

        $this->object->executeQuery('fake', new PaymentTransaction);

        $this->assertTrue($handlerCalled);
    }

    public function testExecuteQueryWithExceptionOnProcessResponse()
    {
        $handlerCalled = false;
        $handler  = function(Exception $e) use (&$handlerCalled)
        {
            $handlerCalled = true;
        };

        ExceptionQuery::$request        = new Request;
        FakeGatewayClient::$response    = new Response;

        $this->object->setHandler(PaymentProcessor::HANDLER_CATCH_EXCEPTION, $handler);
        $this->object->setGatewayClient(new FakeGatewayClient);

        $this->object->executeQuery('exception', new PaymentTransaction);

        $this->assertTrue($handlerCalled);
    }

    public function testProcessPaynetEasyCallback()
    {
        $handlerCalled = false;
        $handler  = function() use (&$handlerCalled)
        {
            $handlerCalled = true;
        };

        $this->object->setHandler(PaymentProcessor::HANDLER_FINISH_PROCESSING, $handler);

        $response = $this->object->processPaynetEasyCallback(new CallbackResponse(array('type' => 'fake')), new PaymentTransaction);

        $this->assertTrue($handlerCalled);
        $this->assertNotNull($response);
        $this->assertInstanceOf('PaynetEasy\PaynetEasyApi\Transport\CallbackResponse', $response);
    }

    public function testProcessPaynetEasyCallbackOnFinishedPayment()
    {
        $handlerCalled = false;
        $handler  = function() use (&$handlerCalled)
        {
            $handlerCalled = true;
        };

        $this->object->setHandler(PaymentProcessor::HANDLER_FINISH_PROCESSING, $handler);

        $this->object->processPaynetEasyCallback(new CallbackResponse(array('type' => 'fake')), new PaymentTransaction);

        $this->assertTrue($handlerCalled);
    }

    public function testProcessPaynetEasyCallbackException()
    {
        $handlerCalled = false;
        $handler  = function() use (&$handlerCalled)
        {
            $handlerCalled = true;
        };

        $this->object->setHandler(PaymentProcessor::HANDLER_CATCH_EXCEPTION, $handler);

        $this->object->processPaynetEasyCallback(new CallbackResponse(array('type' => 'sale')), new PaymentTransaction);

        $this->assertTrue($handlerCalled);
    }

    public function testhandlers()
    {
        $this->object->setHandlers(array
        (
            PaymentProcessor::HANDLER_SAVE_CHANGES => function (){},
            PaymentProcessor::HANDLER_SHOW_HTML => function (){}
        ));

        $this->assertCount(2, $this->object->handlers);
        $this->assertArrayHasKey(PaymentProcessor::HANDLER_SAVE_CHANGES, $this->object->handlers);
        $this->assertArrayHasKey(PaymentProcessor::HANDLER_SHOW_HTML, $this->object->handlers);

        $this->object->removeHandler(PaymentProcessor::HANDLER_SAVE_CHANGES);

        $this->assertCount(1, $this->object->handlers);
        $this->assertArrayNotHasKey(PaymentProcessor::HANDLER_SAVE_CHANGES, $this->object->handlers);
        $this->assertArrayHasKey(PaymentProcessor::HANDLER_SHOW_HTML, $this->object->handlers);

        $this->object->removeHandlers();

        $this->assertEmpty($this->object->handlers);
    }

    public function testCallHandler()
    {
        $handlerCalled = false;
        $handler  = function() use (&$handlerCalled)
        {
            $handlerCalled = true;
        };

        $this->object->setHandler(PaymentProcessor::HANDLER_SAVE_CHANGES, $handler);
        $this->object->callHandler(PaymentProcessor::HANDLER_SAVE_CHANGES, new PaymentTransaction, new Response);

        $this->assertTrue($handlerCalled);
    }

    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage Unknown handler name: '_'
     */
    public function testSetHandlerWrongName()
    {
        $this->object->setHandler('_', 'not_callable');
    }

    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage Handler callback must be callable
     */
    public function testSetHandlerNotCallable()
    {
        $this->object->setHandler(PaymentProcessor::HANDLER_SAVE_CHANGES, 'not_callable');
    }
}

class PublicPaymentProcessor extends PaymentProcessor
{
    public $handlers = array();

    public function callHandler($handlerName)
    {
        return call_user_func_array(array('parent', 'callHandler'), func_get_args());
    }
}