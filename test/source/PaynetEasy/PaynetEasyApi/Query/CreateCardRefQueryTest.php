<?php

namespace PaynetEasy\PaynetEasyApi\Query;

use PaynetEasy\PaynetEasyApi\Query\Prototype\SyncQueryTest;
use PaynetEasy\PaynetEasyApi\PaymentData\Payment;
use PaynetEasy\PaynetEasyApi\Transport\Response;
use PaynetEasy\PaynetEasyApi\PaymentData\PaymentTransaction;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-06-12 at 16:43:22.
 */
class CreateCardRefQueryTest extends SyncQueryTest
{
    protected $successType = 'create-card-ref-response';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new CreateCardRefQuery('_');
    }

    /**
     * @expectedException \PaynetEasy\PaynetEasyApi\Exception\ValidationException
     * @expectedExceptionMessage Only approved and finished payment transaction can be used for create-card-ref-id
     */
    public function testCreateWithNotEndedPayment()
    {
        $this->object->createRequest(parent::getPaymentTransaction());
    }

    public function testCreateRequestProvider()
    {
        return array(array
        (
            sha1
            (
                self::LOGIN .
                self::CLIENT_PAYMENT_ID .
                self::PAYNET_PAYMENT_ID .
                self::SIGNING_KEY
            ),
            'recurrent'
        ));
    }

    /**
     * @expectedException \PaynetEasy\PaynetEasyApi\Exception\ValidationException
     * @expectedExceptionMessage Some required fields missed or empty in Response: card-ref-id
     */
    public function testProcessResponseWithException()
    {
        $paymentTransaction = $this->getPaymentTransaction();

        $this->object->processResponse($paymentTransaction, new Response(array
        (
            'type'              =>  $this->successType,
            'status'            => 'processing',
            'paynet-order-id'   =>  self::PAYNET_PAYMENT_ID,
            'merchant-order-id' =>  self::CLIENT_PAYMENT_ID,
            'serial-number'     =>  md5(time())
        )));
    }

    public function testProcessResponseApprovedProvider()
    {
        return array(array(array
        (
            'type'              =>  $this->successType,
            'status'            => 'approved',
            'card-ref-id'       =>  self::RECURRENT_CARD_FROM_ID,
            'serial-number'     =>  md5(time())
        )));
    }

    public function testProcessResponseProcessingProvider()
    {
        return array(array(array
        (
            'type'              =>  $this->successType,
            'status'            => 'processing',
            'card-ref-id'       =>  self::RECURRENT_CARD_FROM_ID,
            'serial-number'     =>  md5(time())
        )));
    }

    /**
     * {@inheritdoc}
     */
    protected function getPaymentTransaction()
    {
        return parent::getPaymentTransaction()
            ->setStatus(PaymentTransaction::STATUS_APPROVED);
    }

    protected function getPayment()
    {
        return new Payment(array
        (
            'paynet_payment_id'     =>  self::PAYNET_PAYMENT_ID,
            'client_payment_id'     =>  self::CLIENT_PAYMENT_ID
        ));
    }
}
