<?php

namespace PaynetEasy\PaynetEasyApi\Query;

use PaynetEasy\PaynetEasyApi\Transport\Response;
use PaynetEasy\PaynetEasyApi\PaymentData\PaymentTransaction;
use PaynetEasy\PaynetEasyApi\PaymentData\Payment;
use PaynetEasy\PaynetEasyApi\PaymentData\RecurrentCard;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-29 at 16:38:15.
 */
class GetCardInfoQueryTest extends QueryTestPrototype
{
    /**
     * @var GetCardInfoQuery
     */
    protected $object;

    protected $successType = 'get-card-info-response';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new GetCardInfoQuery('get-card-info');
    }

    public function testCreateRequestProvider()
    {
        return array(array
        (
            sha1
            (
                self::LOGIN .
                self::RECURRENT_CARD_FROM_ID .
                self::SIGNING_KEY
            )
        ));
    }

    /**
     * @dataProvider testProcessResponseApprovedProvider
     */
    public function testProcessResponseApproved(array $response)
    {
        $paymentTransaction = $this->getPaymentTransaction();

        $this->object->processResponse($paymentTransaction, new Response($response));

        $recurrentCard = $paymentTransaction->getPayment()->getRecurrentCardFrom();

        $this->assertTrue($paymentTransaction->isApproved());
        $this->assertTrue($paymentTransaction->isFinished());
        $this->assertEquals($response['card-printed-name'], $recurrentCard->getCardPrintedName());
        $this->assertEquals($response['expire-year'],       $recurrentCard->getExpireYear());
        $this->assertEquals($response['expire-month'],      $recurrentCard->getExpireMonth());
        $this->assertEquals($response['bin'],               $recurrentCard->getBin());
        $this->assertEquals($response['last-four-digits'],  $recurrentCard->getLastFourDigits());
    }

    public function testProcessResponseApprovedProvider()
    {
        return array(array(array
        (
            'type'              =>  $this->successType,
            'status'            => 'approved',
            'paynet-order-id'   =>  self::PAYNET_PAYMENT_ID,
            'merchant-order-id' =>  self::CLIENT_PAYMENT_ID,
            'serial-number'     =>  md5(time()),
            'card-printed-name' => 'Vasya Pupkin',
            'expire-month'      => '12',
            'expire-year'       => '14',
            'bin'               => '4485',
            'last-four-digits'  => '9130'
        )));
    }

    public function testProcessResponseDeclinedProvider()
    {
        return array(array(array
        (
            'type'              =>  $this->successType,
            'status'            => 'filtered',
            'paynet-order-id'   =>  self::PAYNET_PAYMENT_ID,
            'merchant-order-id' =>  self::CLIENT_PAYMENT_ID,
            'serial-number'     =>  md5(time()),
            'error-message'     => 'test filtered message',
            'error-code'        =>  8876
        )));
    }

    public function testProcessResponseErrorProvider()
    {
        return array(
        // Payment error after check
        array(array
        (
            'type'              =>  $this->successType,
            'status'            => 'error',
            'paynet-order-id'   =>  self::PAYNET_PAYMENT_ID,
            'merchant-order-id' =>  self::CLIENT_PAYMENT_ID,
            'serial-number'     =>  md5(time()),
            'error-message'     => 'status error message',
            'error-code'        =>  24
        )),
        // Validation error
        array(array
        (
            'type'              => 'validation-error',
            'error-message'     => 'validation error message',
            'error-code'        =>  1
        )),
        // Immediate payment error
        array(array
        (
            'type'              => 'error',
            'error-message'     => 'immediate error message',
            'error-code'        =>  1
        )));
    }

    public function testProcessResponseProcessingProvider()
    {
        return array(array(array
        (
            'type'              =>  $this->successType,
            'status'            => 'processing',
            'paynet-order-id'   =>  self::PAYNET_PAYMENT_ID,
            'merchant-order-id' =>  self::CLIENT_PAYMENT_ID,
            'serial-number'     =>  md5(time()),
            'card-printed-name' => 'Vasya Pupkin',
            'expire-month'      => '12',
            'expire-year'       => '14',
            'bin'               => '4485',
            'last-four-digits'  => '9130'
        )));
    }

    /**
     * @expectedException \PaynetEasy\PaynetEasyApi\Exception\ValidationException
     * @expectedExceptionMessage Response clientPaymentId 'invalid' does not match Payment clientPaymentId
     */
    public function testProcessErrorResponseWithInvalidId()
    {
        $response = new Response(array
        (
            'type'              => 'error',
            'client_orderid'    => 'invalid',
            'card-printed-name' => 'Vasya Pupkin',
            'expire-month'      => '12',
            'expire-year'       => '14',
            'bin'               => '4485',
            'last-four-digits'  => '9130'
        ));

        $this->object->processResponse($this->getPaymentTransaction(), $response);
    }

    /**
     * @expectedException \PaynetEasy\PaynetEasyApi\Exception\ValidationException
     * @expectedExceptionMessage Response clientPaymentId '_' does not match Payment clientPaymentId
     */
    public function testProcessSuccessResponseWithInvalidId()
    {
        $response = new Response(array
        (
            'type'              => $this->successType,
            'paynet-order-id'   => '_',
            'merchant-order-id' => '_',
            'serial-number'     => '_',
            'card-ref-id'       => '_',
            'redirect-url'      => '_',
            'client_orderid'    => 'invalid',
            'card-printed-name' => 'Vasya Pupkin',
            'expire-month'      => '12',
            'expire-year'       => '14',
            'bin'               => '4485',
            'last-four-digits'  => '9130'
        ));

        $this->object->processResponse($this->getPaymentTransaction(), $response);
    }

    protected function getPayment()
    {
        return new Payment(array
        (
            'client_payment_id'     => self::CLIENT_PAYMENT_ID,
            'recurrent_card_from'   => new RecurrentCard(array
            (
                'card_reference_id'     => self::RECURRENT_CARD_FROM_ID
            ))
        ));
    }
}
